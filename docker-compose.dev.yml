services:
  db:
    image: postgres:16-alpine
    container_name: noesis2_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  redis:
    image: redis:7-alpine
    container_name: noesis2_redis
    restart: unless-stopped
    ports:
      - "6379:6379"

  litellm:
    image: ghcr.io/berriai/litellm:main-stable
    container_name: litellm
    environment:
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/litellm
      - CONFIG_FILE_PATH=/config/config.yaml
    entrypoint: ["litellm"]
    command:
      - "--config"
      - "/config/config.yaml"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "4000"
      - "--num_workers"
      - "1"
    volumes:
      - ./config/litellm-config.yaml:/config/config.yaml:ro
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - >
          curl -fsS http://localhost:4000/health/liveliness | grep -qi "alive" || exit 1
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: noesis2_web
    command: sh -c "python manage.py collectstatic --noinput && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - staticfiles:/app/staticfiles
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      litellm:
        condition: service_healthy
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: noesis2_worker
    command: celery -A noesis2 worker -l info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_started
      litellm:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  staticfiles:
    driver: local
