services:
  db:
    image: postgres:16-alpine
    container_name: noesis2_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: noesis2_redis
    restart: unless-stopped
    ports:
      - "6379:6379"

  litellm:
    image: python:3.12-slim
    container_name: litellm
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
    command: >
      sh -c "apt-get update && apt-get install -y --no-install-recommends curl &&
              rm -rf /var/lib/apt/lists/* &&
              pip install --no-cache-dir 'litellm[proxy]' &&
              litellm --config /config/litellm-config.yaml --host 0.0.0.0 --port 4000
                      --master_key \"$LITELLM_MASTER_KEY\""
    volumes:
      - ./config/litellm-config.yaml:/config/litellm-config.yaml:ro
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS -H \"Authorization: Bearer ${LITELLM_MASTER_KEY}\" http://localhost:4000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: noesis2_web
    command: sh -c "python manage.py collectstatic --noinput && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - staticfiles:/app/staticfiles
    env_file:
      - .env
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      litellm:
        condition: service_healthy
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: noesis2_worker
    command: celery -A noesis2 worker -l info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_started
      litellm:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  staticfiles:
    driver: local
  litellm_data:
    driver: local
