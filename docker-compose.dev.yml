services:
  db:
    image: pgvector/pgvector:pg16
    container_name: noesis2_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-noesis2}
      POSTGRES_USER: ${DB_USER:-noesis2}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-noesis2}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  redis:
    image: redis:7-alpine
    container_name: noesis2_redis
    restart: unless-stopped
    ports:
      - "6379:6379"

  toxiproxy:
    image: ghcr.io/shopify/toxiproxy:2.6.0
    container_name: noesis2_toxiproxy
    restart: unless-stopped
    command:
      - toxiproxy-server
      - --host=0.0.0.0
      - --config=/config/toxiproxy.json
    volumes:
      - ./config/toxiproxy.json:/config/toxiproxy.json:ro
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "8474:8474"
      - "15432:15432"
      - "16379:16379"

  litellm:
    image: ghcr.io/berriai/litellm:main-stable
    container_name: litellm
    environment:
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
      - LITELLM_SALT_KEY=${LITELLM_SALT_KEY:-dev-salt-key}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DATABASE_URL=${LITELLM_DATABASE_URL:-postgresql://${DB_USER:-noesis2}:${DB_PASSWORD:-noesis2}@db:5432/litellm}
      - UI_USERNAME=${DB_USER:-noesis2}
      - UI_PASSWORD=${DB_PASSWORD:-noesis2}
      - CONFIG_FILE_PATH=/config/config.yaml
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    entrypoint: ["litellm"]
    command:
      - "--config"
      - "/config/config.yaml"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "4000"
      - "--num_workers"
      - "1"
    volumes:
      - ./config/litellm-config.yaml:/config/config.yaml:ro
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import sys,urllib.request; d=urllib.request.urlopen('http://localhost:4000/health/liveliness', timeout=2).read().decode(); sys.exit(0 if 'alive' in d.lower() else 1)"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: noesis2_web
    command: sh -c "python manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - staticfiles:/app/staticfiles
      - ${APP_LOG_PATH:-./logs/app}:/app/logs
    env_file:
      - .env
      - .env.docker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      toxiproxy:
        condition: service_started
      litellm:
        condition: service_started
    restart: unless-stopped
    environment:
      DATABASE_URL: ${COMPOSE_DATABASE_URL:-postgresql://noesis2:noesis2@db:5432/noesis2}
      REDIS_URL: ${COMPOSE_REDIS_URL:-redis://redis:6379/0}
      APP_LOG_DIR: /app/logs

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: noesis2_worker
    command: celery -A noesis2 worker -l info
    volumes:
      - .:/app
      - ${APP_LOG_PATH:-./logs/app}:/app/logs
    env_file:
      - .env
      - .env.docker
    depends_on:
      redis:
        condition: service_started
      toxiproxy:
        condition: service_started
      litellm:
        condition: service_started
    restart: unless-stopped
    environment:
      DATABASE_URL: ${COMPOSE_DATABASE_URL:-postgresql://noesis2:noesis2@db:5432/noesis2}
      REDIS_URL: ${COMPOSE_REDIS_URL:-redis://redis:6379/0}
      APP_LOG_DIR: /app/logs

  rag:
    image: postgres:16-alpine
    container_name: noesis2_rag_migrate
    command: sh -c "PGPASSWORD=${DB_PASSWORD:-noesis2} psql -h db -U ${DB_USER:-noesis2} -d ${DB_NAME:-noesis2} -v ON_ERROR_STOP=1 -f /schema/schema.sql"
    volumes:
      - ./docs/rag/schema.sql:/schema/schema.sql:ro
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    environment:
      DB_USER: ${DB_USER:-noesis2}
      DB_PASSWORD: ${DB_PASSWORD:-noesis2}
      DB_NAME: ${DB_NAME:-noesis2}

  rag-health:
    image: postgres:16-alpine
    container_name: noesis2_rag_health
    command:
      - sh
      - -lc
      - |
        PGPASSWORD=${DB_PASSWORD:-noesis2} psql -h db -U ${DB_USER:-noesis2} -d ${DB_NAME:-noesis2} -v ON_ERROR_STOP=1 \
          -c "SELECT 1 FROM pg_extension WHERE extname='vector';" \
          -c "SELECT 1 FROM rag.documents LIMIT 0;" \
          -c "SELECT 1 FROM rag.chunks LIMIT 0;" \
          -c "SELECT 1 FROM rag.embeddings LIMIT 0;"
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    environment:
      DB_USER: ${DB_USER:-noesis2}
      DB_PASSWORD: ${DB_PASSWORD:-noesis2}
      DB_NAME: ${DB_NAME:-noesis2}

  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: noesis2_migrate
    profiles: ["jobs"]
    command: >-
      sh -lc "/usr/local/bin/python manage.py migrate_schemas --shared &&
      /usr/local/bin/python manage.py migrate_schemas --tenant"
    volumes:
      - .:/app
      - staticfiles:/app/staticfiles
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://${DB_USER:-noesis2}:${DB_PASSWORD:-noesis2}@db:5432/${DB_NAME:-noesis2}}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}

  bootstrap:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: noesis2_bootstrap
    profiles: ["jobs"]
    command: >-
      sh -lc "/usr/local/bin/python manage.py bootstrap_public_tenant --domain=localhost &&
      /usr/local/bin/python manage.py create_tenant --schema=${DEV_TENANT_SCHEMA:-dev} --name='${DEV_TENANT_NAME:-Dev Tenant}' --domain=${DEV_DOMAIN:-dev.localhost} || true &&
      /usr/local/bin/python manage.py migrate_schemas --tenant --schema=${DEV_TENANT_SCHEMA:-dev} &&
      DJANGO_SUPERUSER_PASSWORD=${DEV_SUPERUSER_PASSWORD:-admin123} /usr/local/bin/python manage.py create_tenant_superuser --schema=${DEV_TENANT_SCHEMA:-dev} --username=${DEV_SUPERUSER_USERNAME:-admin} --email=${DEV_DEV_SUPERUSER_EMAIL:-admin@example.com} --noinput"
    volumes:
      - .:/app
      - staticfiles:/app/staticfiles
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://${DB_USER:-noesis2}:${DB_PASSWORD:-noesis2}@db:5432/${DB_NAME:-noesis2}}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}

volumes:
  postgres_data:
    driver: local
  staticfiles:
    driver: local
