# Generated by Django 5.2.6 on 2025-09-09

from django.db import migrations, models
import django.db.models.deletion
from django.utils.text import slugify


def forwards_create_orgs(apps, schema_editor):
    Project = apps.get_model("projects", "Project")
    Organization = apps.get_model("organizations", "Organization")

    for project in Project.objects.all():
        org = Organization.objects.create(
            name=f"Legacy Org {project.id}", slug=slugify(f"legacy-org-{project.id}")
        )
        project.organization = org
        project.save(update_fields=["organization"])


def backwards_delete_legacy_orgs(apps, schema_editor):
    Project = apps.get_model("projects", "Project")
    Organization = apps.get_model("organizations", "Organization")
    # Detach projects from the legacy organizations first, then delete orgs
    legacy_orgs = Organization.objects.filter(slug__startswith="legacy-org-")
    Project.objects.filter(organization__in=list(legacy_orgs)).update(organization=None)
    legacy_orgs.delete()


class Migration(migrations.Migration):

    dependencies = [
        ("organizations", "0001_initial"),
        ("projects", "0001_initial"),
    ]

    # Avoid Postgres constraint/trigger issues during backwards migration
    atomic = False

    def ensure_org_column(apps, schema_editor):  # type: ignore[no-redef]
        vendor = schema_editor.connection.vendor
        if vendor == "postgresql":
            # Add column if missing. Keep it nullable for backfill.
            schema_editor.execute(
                "ALTER TABLE projects_project ADD COLUMN IF NOT EXISTS organization_id uuid"
            )
            # Optionally add FK constraint if not present.
            schema_editor.execute(
                """
                DO $$
                BEGIN
                  IF NOT EXISTS (
                    SELECT 1 FROM pg_constraint c
                    JOIN pg_class t ON t.oid = c.conrelid
                    WHERE t.relname = 'projects_project'
                      AND c.contype = 'f'
                  ) THEN
                    ALTER TABLE projects_project
                      ADD CONSTRAINT projects_project_organization_id_fk
                      FOREIGN KEY (organization_id)
                      REFERENCES organizations_organization(id)
                      DEFERRABLE INITIALLY DEFERRED;
                  END IF;
                END$$;
                """
            )
        else:
            # SQLite or others: add column if it doesn't exist
            try:
                # Check existence via PRAGMA table_info
                existing = False
                for row in schema_editor.connection.cursor().execute(
                    "PRAGMA table_info('projects_project')"
                ):
                    if row[1] == "organization_id":
                        existing = True
                        break
                if not existing:
                    schema_editor.execute(
                        "ALTER TABLE projects_project ADD COLUMN organization_id TEXT"
                    )
            except Exception:
                # Best-effort; many backends support ADD COLUMN directly
                schema_editor.execute(
                    "ALTER TABLE projects_project ADD COLUMN organization_id"
                )

    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name="project",
                    name="organization",
                    field=models.ForeignKey(
                        to="organizations.organization",
                        on_delete=django.db.models.deletion.CASCADE,
                        null=True,
                        blank=True,
                    ),
                ),
            ],
            database_operations=[
                migrations.RunPython(ensure_org_column, reverse_code=migrations.RunPython.noop),
            ],
        ),
        migrations.RunPython(forwards_create_orgs, backwards_delete_legacy_orgs),
        migrations.AlterField(
            model_name="project",
            name="organization",
            field=models.ForeignKey(
                to="organizations.organization",
                on_delete=django.db.models.deletion.CASCADE,
                null=False,
                blank=False,
            ),
        ),
    ]
