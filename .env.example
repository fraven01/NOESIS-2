# Copy this file to `.env` and fill in values

# Django settings
SECRET_KEY=b5n*qjf!ru5&at9*bn8)!3-*708rind-g(k!!*qsgscef)78y
DEBUG=true
DJANGO_SETTINGS_MODULE=noesis2.settings.development
# Comma-separated hostnames that may serve the app
ALLOWED_HOSTS=example.com

# Core infrastructure
# Unified DB credentials for dev; used by Postgres init and DSNs.
# NOTE: URL-encode special characters in passwords (e.g. # -> %23, $ -> %24)
DB_USER=noesis2
DB_PASSWORD=noesis2
DB_NAME=noesis2
LITELLM_DB_NAME=litellm

# App DSNs
DATABASE_URL=postgresql://noesis2:noesis2@db:5432/noesis2
# Optional separate DSN for LiteLLM admin DB (defaults in compose to DB_* + LITELLM_DB_NAME)
# LITELLM_DATABASE_URL=postgresql://noesis2:noesis2@db:5432/litellm

REDIS_URL=redis://redis:6379/0
RAG_ENABLED=false
# Optional separate DSN for pgvector (falls abweichend von DATABASE_URL)
# RAG_DATABASE_URL=postgresql://user:pass@host:port/dbname

# Organization settings
# Currently no organization-specific environment variables are required

# AI Core / LLM infrastructure
# LiteLLM local proxy (see docker-compose.dev.yml)
LITELLM_BASE_URL=http://litellm:4000
LITELLM_MASTER_KEY=dev-master-key
# Client auth for calling LiteLLM (defaults to LITELLM_MASTER_KEY if unset)
LITELLM_API_KEY= dev-master-key
# Preferred for Gemini (Google AI Studio)
GEMINI_API_KEY=AIzaSyBpi3FMNQwBuat5ZmmO19kgtY31Cx7WtrA
# Optional legacy var sometimes referenced by SDKs/tools
GOOGLE_API_KEY=AIzaSyBpi3FMNQwBuat5ZmmO19kgtY31Cx7WtrA
LITELLM_SALT_KEY=dev-salt-key
# LiteLLM Proxy DB (Admin UI, keys, spend logs)
# Uses LITELLM_DATABASE_URL if set, otherwise DB_* + LITELLM_DB_NAME
LANGFUSE_PUBLIC_KEY=pk-lf-e5dfc48d-11fc-4a8c-88c9-2038f048a615
LANGFUSE_SECRET_KEY=sk-lf-6197d09c-2748-457b-ad3e-f4593d03fb8b
LANGFUSE_ENABLED=True
AI_CORE_RATE_LIMIT_QUOTA=60

# LiteLLM Admin UI (optional; defaults map to DB_USER/DB_PASSWORD via compose)
# UI_USERNAME=
# UI_PASSWORD=
