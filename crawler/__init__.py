"""Crawler app contracts for source canonicalization, frontier, and fetcher policies."""

from .contracts import (
    DEFAULT_TRACKING_PARAMETERS,
    DEFAULT_TRACKING_PREFIXES,
    Decision,
    DEFAULT_NATIVE_ID_GETTER,
    HTTP_URL_CANONICALIZER,
    NormalizedSource,
    ProviderRules,
    deregister_provider,
    get_provider_rules,
    normalize_source,
    register_provider,
)
from .frontier import (
    CrawlSignals,
    FrontierAction,
    FrontierDecision,
    HostPolitenessPolicy,
    HostVisitState,
    RecrawlFrequency,
    RobotsPolicy,
    SourceDescriptor,
    decide_frontier_action,
)
from .fetcher import (
    FetchMetadata,
    FetchRequest,
    FetchResult,
    FetchStatus,
    FetchTelemetry,
    FetcherLimits,
    PolitenessContext,
    evaluate_fetch_response,
)
from .errors import CrawlerError, ErrorClass
from .http_fetcher import FetchRetryPolicy, HttpFetcher, HttpFetcherConfig
from .parser import (
    ParseResult,
    ParseStatus,
    ParsedEntity,
    ParserContent,
    ParserStats,
    build_parse_result,
    compute_parser_stats,
)
from .guardrails import (
    GuardrailDecision,
    GuardrailLimits,
    GuardrailSignals,
    GuardrailStatus,
    QuotaLimits,
    QuotaUsage,
    enforce_guardrails,
)
from documents.contracts import NormalizedDocument

from .normalizer import (
    ProviderReference,
    build_normalized_document,
    document_parser_stats,
    document_payload_bytes,
    normalize_diagnostics,
    resolve_provider_reference,
)
from .delta import (
    DeltaDecision,
    DeltaSignatures,
    DeltaStatus,
    NearDuplicateSignature,
    DEFAULT_NEAR_DUPLICATE_THRESHOLD,
    evaluate_delta,
)
from .policies import (
    HostPolicy,
    PolicyRegistry,
    ProviderPolicy,
    build_policy_registry,
)
from .ingestion import (
    IngestionDecision,
    IngestionPayload,
    IngestionStatus,
    build_ingestion_decision,
    build_ingestion_error,
)
from .lifecycle_model import (
    ALLOWED_TRANSITIONS,
    FINAL_STATUSES,
    InvalidLifecycleTransition,
    LifecycleEvent,
    LifecycleStatus,
    LifecycleTimeline,
)
from .retire import (
    LifecycleDecision,
    LifecycleState,
    RetirePolicy,
    RetireSignals,
    evaluate_lifecycle,
)

__all__ = [
    "DEFAULT_TRACKING_PARAMETERS",
    "DEFAULT_TRACKING_PREFIXES",
    "DEFAULT_NATIVE_ID_GETTER",
    "Decision",
    "HTTP_URL_CANONICALIZER",
    "NormalizedSource",
    "ProviderRules",
    "deregister_provider",
    "get_provider_rules",
    "normalize_source",
    "register_provider",
    "CrawlSignals",
    "FrontierAction",
    "FrontierDecision",
    "HostPolitenessPolicy",
    "HostVisitState",
    "RecrawlFrequency",
    "RobotsPolicy",
    "SourceDescriptor",
    "decide_frontier_action",
    "FetchMetadata",
    "FetchRequest",
    "FetchResult",
    "FetchStatus",
    "FetchTelemetry",
    "FetcherLimits",
    "PolitenessContext",
    "evaluate_fetch_response",
    "CrawlerError",
    "ErrorClass",
    "FetchRetryPolicy",
    "HttpFetcher",
    "HttpFetcherConfig",
    "ParseResult",
    "ParseStatus",
    "ParsedEntity",
    "ParserContent",
    "ParserStats",
    "build_parse_result",
    "compute_parser_stats",
    "GuardrailDecision",
    "GuardrailLimits",
    "GuardrailSignals",
    "GuardrailStatus",
    "QuotaLimits",
    "QuotaUsage",
    "enforce_guardrails",
    "NormalizedDocument",
    "ProviderReference",
    "build_normalized_document",
    "document_parser_stats",
    "document_payload_bytes",
    "normalize_diagnostics",
    "resolve_provider_reference",
    "DeltaDecision",
    "DeltaSignatures",
    "DeltaStatus",
    "NearDuplicateSignature",
    "DEFAULT_NEAR_DUPLICATE_THRESHOLD",
    "evaluate_delta",
    "HostPolicy",
    "PolicyRegistry",
    "ProviderPolicy",
    "build_policy_registry",
    "IngestionDecision",
    "IngestionPayload",
    "IngestionStatus",
    "build_ingestion_decision",
    "build_ingestion_error",
    "ALLOWED_TRANSITIONS",
    "FINAL_STATUSES",
    "InvalidLifecycleTransition",
    "LifecycleEvent",
    "LifecycleStatus",
    "LifecycleTimeline",
    "LifecycleDecision",
    "LifecycleState",
    "RetirePolicy",
    "RetireSignals",
    "evaluate_lifecycle",
]
