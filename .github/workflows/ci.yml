name: CI

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  verify-secrets:
    name: Verify Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        shell: bash
        run: |
          sudo apt-get update -y >/dev/null 2>&1
          sudo apt-get install -y jq >/dev/null 2>&1

      - name: Verify GCP Credentials JSON structure
        shell: bash
        run: |
          echo "Verifying GCP_CREDENTIALS..."
          CREDS='${{ secrets.GCP_CREDENTIALS }}'
          if [ -z "$CREDS" ]; then
            echo "::error::GCP_CREDENTIALS is empty!"; exit 1;
          fi
          printf '%s' "$CREDS" > gcp_creds.json
          PARSED_PROJECT_ID=$(jq -r '.project_id' gcp_creds.json)
          echo "Project ID parsed from JSON: $PARSED_PROJECT_ID"
          if [ "$PARSED_PROJECT_ID" = "null" ] || [ -z "$PARSED_PROJECT_ID" ]; then
            echo "::error::Could not parse project_id from GCP_CREDENTIALS JSON."; exit 1;
          fi

      - name: Verify simple string secrets
        shell: bash
        run: |
          echo "Verifying GCP_PROJECT_ID..."
          PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          echo "Project ID Length: ${#PROJECT_ID}"
          echo "Project ID Starts with: ${PROJECT_ID:0:5}"
          echo "Project ID Ends with: ${PROJECT_ID: -5}"

          echo "Verifying GCP_REGION (non-sensitive)..."
          echo "Region: ${{ secrets.GCP_REGION }}"

          echo "Verifying GAR_REPOSITORY..."
          REPO="${{ secrets.GAR_REPOSITORY }}"
          echo "Repository Name Length: ${#REPO}"

          echo "Verifying CLOUD_SQL_CONNECTION_NAME..."
          CONN_NAME="${{ secrets.CLOUD_SQL_CONNECTION_NAME }}"
          echo "Connection Name Length: ${#CONN_NAME}"

      - name: Verify database secrets (length check only)
        shell: bash
        run: |
          echo "Verifying DB secrets..."
          [ -n "${{ secrets.DB_NAME }}" ] || { echo "::error::DB_NAME is NOT set!"; exit 1; }
          [ -n "${{ secrets.DB_USER }}" ] || { echo "::error::DB_USER is NOT set!"; exit 1; }
          [ -n "${{ secrets.DB_PASSWORD }}" ] || { echo "::error::DB_PASSWORD is NOT set!"; exit 1; }
          echo "DB secrets presence verified."

      - name: Verify Django SECRET_KEY (presence only)
        shell: bash
        run: |
          echo "Verifying SECRET_KEY..."
          [ -n "${{ secrets.SECRET_KEY }}" ] || { echo "::error::SECRET_KEY is NOT set!"; exit 1; }
          echo "SECRET_KEY presence verified."

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Debug GitHub context
        uses: actions/github-script@v7
        with:
          script: |
            core.info(`event: ${context.eventName}`)
            core.info(`actor: ${context.actor}`)
            core.info(`sender: ${context.payload?.sender?.login || 'n/a'}`)
            core.info(`pr.user: ${context.payload?.pull_request?.user?.login || 'n/a'}`)
            core.info(`head.ref: ${context.payload?.pull_request?.head?.ref || process.env.GITHUB_REF_NAME}`)
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Python deps
        run: pip install -r requirements.txt -r requirements-dev.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install Node deps
        run: npm ci

      - name: Run linters
        run: npm run lint

  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: noesis2_ci
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      SECRET_KEY: ci-secret
      DJANGO_SETTINGS_MODULE: noesis2.settings.development
      DB_NAME: noesis2_ci
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: localhost
      DB_PORT: 5432
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Python deps
        run: pip install -r requirements.txt -r requirements-dev.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install Node deps
        run: npm ci

      - name: Run public (shared) migrations
        run: python manage.py migrate_schemas --shared

      - name: Create CI tenant
        run: python manage.py create_tenant --schema=ci --name="CI" --domain=ci.localhost

      - name: Run tenant migrations
        run: python manage.py migrate_schemas --tenant

      - name: Run tests
        run: python -m pytest -q --cov=noesis2 --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      REGISTRY_HOST: ${{ secrets.GCP_REGION }}-docker.pkg.dev
      IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY }}/noesis2-web:${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker "$REGISTRY_HOST" -q
        env:
          REGISTRY_HOST: ${{ env.REGISTRY_HOST }}

      - name: Build image
        run: docker build -t "$IMAGE" -f Dockerfile .

      - name: Push image
        run: docker push "$IMAGE"

      # Image tag is deterministic (${GITHUB_SHA}); downstream jobs can rebuild it.

  migrate:
    name: Run DB Migrations
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Run migrations via Cloud Run Job
        env:
          IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY }}/noesis2-web:${{ github.sha }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          CLOUD_SQL_CONNECTION_NAME: ${{ secrets.CLOUD_SQL_CONNECTION_NAME }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
        run: |
          gcloud run jobs deploy noesis2-migrate \
            --image "$IMAGE" \
            --project "$GCP_PROJECT_ID" \
            --region "$GCP_REGION" \
            --max-retries=0 \
            --task-timeout=600s \
            --set-cloudsql-instances "$CLOUD_SQL_CONNECTION_NAME" \
            --set-env-vars DJANGO_SETTINGS_MODULE=noesis2.settings.production,GOOGLE_CLOUD_PROJECT="$GCP_PROJECT_ID",CLOUD_SQL_CONNECTION_NAME="$CLOUD_SQL_CONNECTION_NAME",SECRET_KEY="$SECRET_KEY",DB_NAME="$DB_NAME",DB_USER="$DB_USER",DB_PASSWORD="$DB_PASSWORD",CELERY_BROKER_URL="$CELERY_BROKER_URL",CELERY_RESULT_BACKEND="$CELERY_RESULT_BACKEND" \
            --command python \
            --args manage.py,migrate_schemas,--noinput

  seed-staging:
    name: Seed Staging Data
    runs-on: ubuntu-latest
    needs: migrate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Seed demo tenant and bind Cloud Run host
        env:
          IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY }}/noesis2-web:${{ github.sha }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          CLOUD_SQL_CONNECTION_NAME: ${{ secrets.CLOUD_SQL_CONNECTION_NAME }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
        run: |
          gcloud run jobs deploy noesis2-seed \
            --image "$IMAGE" \
            --project "$GCP_PROJECT_ID" \
            --region "$GCP_REGION" \
            --max-retries=0 \
            --task-timeout=600s \
            --set-cloudsql-instances "$CLOUD_SQL_CONNECTION_NAME" \
            --set-env-vars DJANGO_SETTINGS_MODULE=noesis2.settings.production,GOOGLE_CLOUD_PROJECT="$GCP_PROJECT_ID",CLOUD_SQL_CONNECTION_NAME="$CLOUD_SQL_CONNECTION_NAME",SECRET_KEY="$SECRET_KEY",DB_NAME="$DB_NAME",DB_USER="$DB_USER",DB_PASSWORD="$DB_PASSWORD",CELERY_BROKER_URL="$CELERY_BROKER_URL",CELERY_RESULT_BACKEND="$CELERY_RESULT_BACKEND" \
            --command bash \
            --args -lc,"python manage.py bootstrap_public_tenant --domain \"$STAGING_HOST\" && python manage.py create_demo_data && python manage.py add_domain --schema=demo --domain=\"$STAGING_HOST\" --primary"
          gcloud run jobs execute noesis2-migrate --project "$GCP_PROJECT_ID" --region "$GCP_REGION" --wait

  deploy-staging:
    name: Deploy to Cloud Run (staging)
    runs-on: ubuntu-latest
    needs: migrate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY }}/noesis2-web:${{ github.sha }}
    steps:
      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run (staging)
        uses: google-github-actions/deploy-cloudrun@v2.1.0
        with:
          service: noesis-2-staging
          image: ${{ env.IMAGE }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          region: ${{ secrets.GCP_REGION }}
          flags: '--add-cloudsql-instances=${{ secrets.CLOUD_SQL_CONNECTION_NAME }} --allow-unauthenticated'
          env_vars: |
            DJANGO_SETTINGS_MODULE=noesis2.settings.production
            GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT_ID }}
            CLOUD_SQL_CONNECTION_NAME=${{ secrets.CLOUD_SQL_CONNECTION_NAME }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}
            CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}
