name: CI

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Python deps
        run: pip install -r requirements.txt -r requirements-dev.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install Node deps
        run: npm ci

      - name: Run linters
        run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ci-secret
      DJANGO_SETTINGS_MODULE: noesis2.settings.development
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Python deps
        run: pip install -r requirements.txt -r requirements-dev.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install Node deps
        run: npm ci

      - name: Run tests
        run: python -m pytest -q

  deploy-staging:
    name: Deploy to Cloud Run (staging)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY }}/noesis2-web:${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev -q

      - name: Build and push image
        run: |
          docker build -t "$IMAGE" -f Dockerfile .
          docker push "$IMAGE"

      - name: Deploy to Cloud Run (staging)
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: noesis-2-staging
          image: ${{ env.IMAGE }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          region: ${{ secrets.GCP_REGION }}
          cloud_sql_instances: ${{ secrets.CLOUD_SQL_CONNECTION_NAME }}
          env_vars: |
            DJANGO_SETTINGS_MODULE=noesis2.settings.production
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}
            CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}
